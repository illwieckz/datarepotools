#! /usr/bin/env bash

### Legal
#
# Author:  Thomas Debesse <dev@illwieckz.net>
# License: ISC
# 

set -e

tag_name='.'

if [ "${1}" = '-q' ]
then
	exec 1>/dev/null
	exec 2>/dev/null
	shift
fi

if [ "${1}" = '-t' ]
then
	shift
	if ! [ -z "${1}" ]
	then
		tag_name="${1}"
		shift
	else 
		printf 'ERROR: -t needs tag name\n' >&2
		exit 1
	fi
fi

file_name="${1}"

[ -z "${file_name}" ] && exit
[ ! -f "${file_name}" ] && exit

isSmaller () {
	size1="$(stat -c%s "${1}")"
	size2="$(stat -c%s "${2}")"

	[ "${size1}" -lt "${size2}" ]
	true
}

getSum () {
	sha512sum "${1}" | cut -f1 -d' '
}

TMPDIR="${TMPDIR-/tmp}"

temp_dir="$(mktemp -d "${TMPDIR}/drt-pngrute-XXXXXXXX")"

cache_basepath="pngbrute";
cache_basedir="$(realpath "${XDG_CACHE_HOME:-${HOME}/.cache}/${cache_basepath}")";
cache_dir="$(realpath "${XDG_CACHE_HOME:-${HOME}/.cache}/${cache_basepath}/${tag_name}")";

temp_file="$(mktemp "${temp_dir}/png-XXXXXXXX.png")"
rgba_file="$(mktemp "${temp_dir}/rgba-XXXXXXXX.rgba")"

mkdir -p "${cache_dir}"
echo "= PNGBRUTE ========= ${file_name}"

mkdir -p "${cache_dir}"

cp -a --reflink=auto "${file_name}" "${temp_file}"
oxipng --opt 0 --interlace 0 --strip all "${temp_file}"
convert "${temp_file}" "${rgba_file}"
file_sum=$(getSum "${rgba_file}")
cache_file="$(find "${cache_basedir}" -type f -name "${file_sum}" | tail -n1)"
new_cache_file="${cache_dir}/${file_sum}"

echo "file sum: ${file_sum}"
echo "cache file ${cache_file}"

if [ -f "${cache_file}" ]
then
	echo "already bruteforced"
	cp -a --reflink=auto "${cache_file}" "${file_name}"
else
	convert "${temp_file}" +set comment -define png:exclude-chunks=date "${temp_file}"

	# do not use oxipng --alpha
	# alpha channel may still be used as a standalone component
	oxipng --opt 6 --strip all "${temp_file}"

	crush_file="$(mktemp "${temp_dir}/crushed-XXXXXXXX")"
	pngcrush "${temp_file}" "${crush_file}"
	isSmaller "${crush_file}" "${temp_file}" && cp "${crush_file}" "${temp_file}"
	rm "${crush_file}"

	pngwolf --out-deflate=zopfli,iter=30 --max-stagnate-time=20 --in="${temp_file}" --out="${temp_file}"
#	pngwolf --out-deflate=zopfli,iter=20 --max-stagnate-time=10 --in="${temp_file}" --out="${temp_file}"

	touch -r "${file_name}" "${temp_file}"
	isSmaller "${temp_file}" "${file_name}" && cp -a "${temp_file}" "${file_name}"
	cp -a --reflink=auto "${file_name}" "${new_cache_file}"
fi

rm "${temp_file}"
rm "${rgba_file}"
rmdir "${temp_dir}"

#EOF
