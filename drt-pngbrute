#! /usr/bin/env bash

### Legal
#
# Author:  Thomas Debesse <dev@illwieckz.net>
# License: ISC
# 

set -e

tag_name='.'

# enable_zopfli='true'
# if [ "${1}" = '-n' ]
# then
# 	enable_zopfli='false'
# 	shift
# fi

if [ "${1}" = '-q' ]
then
	exec 1>/dev/null
	exec 2>/dev/null
	shift
fi

do_pngcrush='true'
do_oxipng='true'
do_oxipng_zopfli='false'
do_pngwolf_zopfli='true'

case "${1}" in
	'-1')
		do_pngcrush='true'
		do_oxipng='false'
		do_oxipng_zopfli='false'
		do_pngwolf_zopfli='false'
		shift
		;;
	'-2')
		do_pngcrush='false'
		do_oxipng='true'
		do_oxipng_zopfli='false'
		do_pngwolf_zopfli='false'
		shift
		;;
	'-3')
		do_pngcrush='false'
		do_oxipng='true'
		do_oxipng_zopfli='true'
		do_pngwolf_zopfli='false'
		shift
		;;
	'-4')
		do_pngcrush='false'
		do_oxipng='false'
		do_oxipng_zopfli='false'
		do_pngwolf_zopfli='true'
		shift
		;;
	*)
		;;
esac

if [ "${1}" = '-t' ]
then
	shift
	if ! [ -z "${1}" ]
	then
		tag_name="${1}"
		shift
	else 
		printf 'ERROR: -t needs tag name\n' >&2
		exit 1
	fi
fi

file_name="${1}"

[ -z "${file_name}" ] && exit
[ ! -f "${file_name}" ] && exit

isSmaller () {
	size1="$(stat -c%s "${1}")"
	size2="$(stat -c%s "${2}")"

	[ "${size1}" -lt "${size2}" ]
}

useOrDeleteIfSmaller () {
	if isSmaller "${1}" "${2}"
	then
		cp "${1}" "${2}"
	fi

	rm "${1}"
}

getSum () {
	sha512sum "${1}" | cut -f1 -d' '
}

TMPDIR="${TMPDIR-/tmp}"

temp_dir="$(mktemp -d "${TMPDIR}/drt-pngrute-XXXXXXXX")"

cache_basepath="pngbrute";
cache_basedir="$(realpath "${XDG_CACHE_HOME:-${HOME}/.cache}/${cache_basepath}")";
cache_dir="$(realpath "${XDG_CACHE_HOME:-${HOME}/.cache}/${cache_basepath}/${tag_name}")";

temp_file="$(mktemp "${temp_dir}/png-XXXXXXXX.png")"
rgba_file="$(mktemp "${temp_dir}/rgba-XXXXXXXX.rgba")"

mkdir -p "${cache_dir}"
echo "= PNGBRUTE ========= ${file_name}"

mkdir -p "${cache_dir}"

cp -a --reflink=auto "${file_name}" "${temp_file}"
oxipng --opt 0 --interlace 0 --strip all "${temp_file}"
convert "${temp_file}" "${rgba_file}"
file_sum=$(getSum "${rgba_file}")
cache_file="$(find "${cache_basedir}" -type f -name "${file_sum}" | tail -n1)"
new_cache_file="${cache_dir}/${file_sum}"

echo "file sum: ${file_sum}"
echo "cache file ${cache_file}"

if [ -f "${cache_file}" ]
then
	echo "already bruteforced"

	if [ "${file_name}" -ot "${cache_file}" ]
	then
		echo "older than previous reference"
		touch -r "${file_name}" "${cache_file}"
	fi

	cp -a --reflink=auto "${cache_file}" "${file_name}"
else
	convert "${temp_file}" +set comment -define png:exclude-chunks=date "${temp_file}"

	if "${do_pngcrush}"
	then
		crush_file="$(mktemp "${temp_dir}/crushed-XXXXXXXX")"
		pngcrush "${temp_file}" "${crush_file}"
		useOrDeleteIfSmaller "${crush_file}" "${temp_file}"
	fi

	if "${do_oxipng_zopfli}"
	then
		# do not use oxipng --alpha
		# alpha channel may still be used as a standalone component
		crush_file="$(mktemp "${temp_dir}/crushed-XXXXXXXX")"
		oxipng --opt 6 --strip all --out "${crush_file}" "${temp_file}"
		useOrDeleteIfSmaller "${crush_file}" "${temp_file}"
	elif "${do_oxipng_zopfli}"
	then
		crush_file="$(mktemp "${temp_dir}/crushed-XXXXXXXX")"
		oxipng --opt 6 --zopfli --strip all --out "${crush_file}" "${temp_file}"
		useOrDeleteIfSmaller "${crush_file}" "${temp_file}"
	fi

	if "${do_pngwolf_zopfli}"
	then
		advpng_iter=1000
		pngwolf_stagnate=1000
	#	pngwolf_stagnate=100
	#	pngwolf_stagnate=10
		zopfli_iter=5000

		# 7zip
		advpng -z -3 -i "${advpng_iter}" "${temp_file}"
		touch -r "${file_name}" "${temp_file}"

		# GA + Zopfli
		pngwolf --max-stagnate-time="${pngwolf_stagnate}" \
			--out-deflate="zopfli,iter=${zopfli_iter},maxsplit=0,verbose=1" \
			--in="${temp_file}" \
			--out="${temp_file}"

	#	if "${enable_zopfli}"
	#	then
	#		pngwolf --max-stagnate-time=1 \
	#			--out-deflate=zopfli,iter=5000,maxsplit=0,verbose=1 \
	#			--in="${temp_file}" \
	#			--out="${temp_file}"
	#	fi
	fi

	touch -r "${file_name}" "${temp_file}"

	if isSmaller "${temp_file}" "${file_name}"
	then
		cp -a "${temp_file}" "${file_name}"
	fi

	cp -a --reflink=auto "${file_name}" "${new_cache_file}"
fi

rm "${temp_file}"
rm "${rgba_file}"
rmdir "${temp_dir}"

#EOF
