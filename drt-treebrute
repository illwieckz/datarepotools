#! /bin/sh

### Legal
#
# Author:  Thomas Debesse <dev@illwieckz.net>
# License: ISC
# 

_help () {
	tab="$(printf '\t')"
	basename="$(basename "${0}")"

	cat <<-EOF
	${basename}: rewrite git tree optimizing for file format and compression

	USAGE: ${basename} ref

	ref:
	${tab}reference
	${tab}${tab}optimize and rewrite the tree since this reference (not included)

	${tab}--all
	${tab}${tab}optimize and rewrite the whole tree including all branches
	
	EOF

	exit
}

drt-gittest || exit "${?}"

if [ -z "${1}" ]
then
	_help
else
	if [ "${1}" = '-h' -o "${1}]" = '--help' ]
	then
		_help
	elif [ "${1}" = '--all' ]
	then
		git_ref="${1}"
	else
		git_ref="${1}..HEAD"
	fi
	shift
fi

if [ -z "${TMPDIR}" ]
then
	temp_dir="$(mktemp -d "/tmp/drt-treebrute-XXXXXXXX}")"
else
	temp_dir="$(mktemp -d "${TMPDIR}/drt-treebrute-XXXXXXXX")"
fi

echo "rewriting tree converting blob to png"
filter_dir="$(mktemp -d "${temp_dir}/filter-XXXXXXXX")"
git filter-branch -d "${filter_dir}" -f --tree-filter "git ls-files -z '*.[bB][mM][pP]' '*.[tT][gG][aA]' '*.[wW][eE][bB][pP]' | drt-multitask -0 -P"$(nproc)" -n1 drt-blobtopng -q" --tag-name-filter cat -- "${git_ref}"
[ -d "${filter_dir}" ] && rm -R "${filter_dir}"

echo "exporting png from tree"
export_dir="$(mktemp -d "${temp_dir}/export-XXXXXXXX")"
filter_dir="$(mktemp -d "${temp_dir}/filter-XXXXXXXX")"
# must be sequential to avoid collisions since multiples similar files are stored under the same name (deduplication)
git filter-branch -d "${filter_dir}" -f --tree-filter "git ls-files -z '*.[pP][nN][gG]' | drt-multitask -0 -P1 -n1 drt-pngexport '${export_dir}'" --tag-name-filter cat -- "${git_ref}"
[ -d "${filter_dir}" ] && rm -R "${filter_dir}"

echo "bruteforcing exported png"
# let some cores available for the detection part, but ensure there is always more than 1 parallel task to let the next file loading while another is taking a nap
find "${export_dir}/" -type f -a -iname '*.png' -print0 | drt-multitask -0 "-P$(($(nproc) / 4 + 1))" -n1 drt-pngbrute -q

[ -d "${export_dir}" ] && rm -R "${export_dir}"

echo "rewriting tree with bruteforced png"
filter_dir="$(mktemp -d "${temp_dir}/filter-XXXXXXXX")"
git filter-branch -d "${filter_dir}" -f --tree-filter "git ls-files -z '*.[pP][nN][gG]' | drt-multitask -0 -P"$(nproc)" -n1 drt-pngbrute -q" --tag-name-filter cat -- "${git_ref}"
[ -d "${filter_dir}" ] && rm -R "${filter_dir}"

echo "rewriting tree gziping blend"
filter_dir="$(mktemp -d "${temp_dir}/filter-XXXXXXXX")"
git filter-branch -d "${filter_dir}" -f --tree-filter "git ls-files -z '*.[bB][lL][eE][nN][dD]' | drt-multitask -0 -P"$(nproc)" -n1 drt-blendbrute -q" --tag-name-filter cat -- "${git_ref}"
[ -d "${filter_dir}" ] && rm -R "${filter_dir}"

echo "rewriting tree bzip2ing xcf"
filter_dir="$(mktemp -d "${temp_dir}/filter-XXXXXXXX")"
git filter-branch -d "${filter_dir}" -f --tree-filter "git ls-files -z '*.[xX][cC][fF]' | drt-multitask -0 -P"$(nproc)" -n1 drt-xcfbrute -q" --tag-name-filter cat -- "${git_ref}"
[ -d "${filter_dir}" ] && rm -R "${filter_dir}"

echo "rewriting tree reflacing flac"
filter_dir="$(mktemp -d "${temp_dir}/filter-XXXXXXXX")"
git filter-branch -d "${filter_dir}" -f --tree-filter "git ls-files -z '*.[wW][aA][vV]' | drt-multitask -0 -P"$(nproc)" -n1 drt-flacbrute -q" --tag-name-filter cat -- "${git_ref}"
[ -d "${filter_dir}" ] && rm -R "${filter_dir}"

echo "rewriting tree flacing wav"
filter_dir="$(mktemp -d "${temp_dir}/filter-XXXXXXXX")"
git filter-branch -d "${filter_dir}" -f --tree-filter "git ls-files -z '*.[wW][aA][vV]' | drt-multitask -0 -P"$(nproc)" -n1 drt-wavtoflac -q" --tag-name-filter cat -- "${git_ref}"
[ -d "${filter_dir}" ] && rm -R "${filter_dir}"

echo "rewriting tree denumberizing map"
filter_dir="$(mktemp -d "${temp_dir}/filter-XXXXXXXX")"
git filter-branch -d "${filter_dir}" -f --tree-filter "git ls-files -z '*.[mM][aA][pP]'| drt-multitask -0 -P"$(nproc)" -n1 drt-mapdenum -q" --tag-name-filter cat -- "${git_ref}"
[ -d "${filter_dir}" ] && rm -R "${filter_dir}"

echo "garbage collecting, pruning"
git reflog expire --expire=now --all
git gc --prune=now --aggressive

rmdir "${temp_dir}"

#EOF
